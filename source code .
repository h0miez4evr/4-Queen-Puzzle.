#include <iostream>
#include<graphics.h>
/*#include<windows.h>//for sound effect.
//#include<mmsystem.h>//for sound effect.*/
using namespace std;
class Queen
{
public:
  int x,y;
  Queen getthecell(int a,int b)
   {
    x=a;
    y=b;
    int m,n;
     m=a/100;
     n=b/100;
     Queen temp;
     if(x>=100*m && x<100*(m+1) &&y>=100*n && y<100*(n+1))
     {
        temp.x=100*m+4; 
        temp.y=100*n+4;
        return temp;
     }
   }
   bool issafe(int**arr,int x,int y,int n)
   {
    for(int row=0;row<4;row++)//checking the columns.
    {
        if(arr[row][y]==1)
        return false;
    }
    int row=x;
    int col=y;
    while(row>=0 && col>=0)//checking the left diagonal column.
    {
        if (arr[row][col]==1)
        {
            return false;
        }
        row--;
        col--;
    }
     row=x;
    col=y;
    while(row>=0 && col<4)//checking the right diagonal column.
    {
        if(arr[row][col]==1)
        {
            return false;
        }
        row--;
        col++;
    }
    return true;
}
bool nQueen(int **arr,int x, int )
{
    if(x>=4)
    {
        return true;
    }
    for(int col=0;col<4;col++)
    {
        if(issafe(arr,x,col,4)==1)
        {
            arr[x][col]=1;
            if(nQueen(arr,x+1,4))
            {
                return true;
            }
            arr[x][col]=0;//backtracing.
        }
    }
    return false;
}
};
int storage[8], storagecount=0,solutionA[8],solutionB[8];
void leftclicksolution(int **arr)
    {  
        int n=0;
        for(int i=0;i<4;i++)
        {
            for(int j=0;j<4;j++)
            {
              if(arr[i][j]==1)
               {
                 cout<<"LEFT-CLICK\t"<<i<<" "<<j<<endl;
                 int s=0,r=0;
                 s=((j+5)*100)+4;
                 r=((i+1)*100)+4;
                 if(n==0)
                 {
                    solutionA[n]=s;
                    n++;
                    solutionA[n]=r;
                    n++;
                 }
                 else if(n==2)
                 {
                    solutionA[n]=s;
                    n++;
                    solutionA[n]=r;
                    n++;
                 }
                  else if(n==4)
                 {
                    solutionA[n]=s;
                    n++;
                    solutionA[n]=r;
                    n++;
                 }
                  else if(n==6)
                 {
                    solutionA[n]=s;
                    n++;
                    solutionA[n]=r;
                    n++;
                 }
               }
            }
        } 
    }
    void rightclicksolution(int solu1[4][4])
    {  
        int n=0;
        for(int i=0;i<4;i++)
        {
            for(int j=0;j<4;j++)
            {
              if(solu1[i][j]==1)
               {
                 cout<<"LEFT-CLICK\t"<<i<<" "<<j<<endl;
                 int s=0,r=0;
                 s=((j+5)*100)+4;
                 r=((i+1)*100)+4;
                 if(n==0)
                 {
                    solutionB[n]=s;
                    n++;
                    solutionB[n]=r;
                    n++;
                 }
                 else if(n==2)
                 {
                    solutionB[n]=s;
                    n++;
                    solutionB[n]=r;
                    n++;
                 }
                  else if(n==4)
                 {
                    solutionB[n]=s;
                    n++;
                    solutionB[n]=r;
                    n++;
                 }
                  else if(n==6)
                 {
                    solutionB[n]=s;
                    n++;
                    solutionB[n]=r;
                    n++;
                 }
               }
            }
        } 
    }
void getstorage(int a,int b)
{
    if(storagecount==0)
    {
        storage[storagecount]=a;
        storagecount++;
        storage[storagecount]=b;
        storagecount++;
    }
    else if(storagecount==2)
    {
        storage[storagecount]=a;
        storagecount++;
        storage[storagecount]=b;
        storagecount++;
    }
     else if(storagecount==4)
    {
        storage[storagecount]=a;
        storagecount++;
        storage[storagecount]=b;
        storagecount++;
    }
     else if(storagecount==6)
    {
        storage[storagecount]=a;
        storagecount++;
        storage[storagecount]=b;
        storagecount++;
    }
 }
 int check()
 {
    int countA=0,countB=0;
    for(int i=0;i<8;i++)
    {
     for(int j=0;j<8;j++)
     {
        if(storage[i]==solutionA[j])
        {
            i++,j++;
            if(storage[i]==solutionA[j++])
             {
                countA++;
                j=0;
             }
        } 
     }
    }
    for(int i=0;i<8;i++)
    {
     for(int j=0;j<8;j++)
     {
       if(storage[i]==solutionB[j])
       {
        i++,j++;
        if(storage[i]==solutionB[j])
        {
            countB++;
            j=0;
        }
       }
     }
    }
    cout<<countA<<" Another is"<<countB;
    if(countA==7 || countB==7)
    {
      return 1;
    }  
    else
    {
     return 0;
    }
 }
void displaythestorage()
{
    cout<<"THE STORED POINTS ARE ";
    for(int i=0;i<8;i++)
    {
        cout<<storage[i]<<" ";
    }
}
int main()
{
    Queen m,s,A,t,I;
    int NEP,stored[8];
    for(int i=0;i<8;i++)
    {
        stored[i]=stored[i];
    }
    Home:
    initwindow(1366,768,"OUTPUT1");
    //PlaySound(TEXT("homesound.wav"),NULL,SND_FILENAME);
    readimagefile("frontbg3.jpg",0,0,1366,768);
    POINT mouse;
    for(int i=0;i<500;i++)
     {
        setcolor(YELLOW);
        readimagefile("frontbg1.jpg",1000,0,1366,300);
        setbkcolor(BLUE);
        settextstyle(BOLD_FONT,HORIZ_DIR,8);
        outtextxy(380,50,"4 QUEEN PUZZLE.");
        setcolor(RED+i);
        setbkcolor(BLUE+i);
        rectangle(610+i,460+i,820+i,510+i);
        settextstyle(BOLD_FONT,HORIZ_DIR,5);
        outtextxy(615+i,465+i,"PLAY NOW");
        rectangle(570+i,530+i,880+i,580+i);
        settextstyle(BOLD_FONT,HORIZ_DIR,5);
        outtextxy(575+i,535+i,"INSTRUCTIONS");
        settextstyle(BOLD_FONT,HORIZ_DIR,5);
        rectangle(655+i,600+i,790+i,650+i);
        outtextxy(660+i,605+i,"ABOUT");
        rectangle(670+i,670+i,780+i,720+i);
        outtextxy(675+i,675+i,"EXIT");
        i=i%3;
        if(GetAsyncKeyState(VK_LBUTTON))
         {
           int c=0,d=0;
           GetCursorPos(&mouse);
           c=mouse.x;
           d=mouse.y;
           cout<<"THE CURSOR POSITION IS "<<c<<" "<<d<<endl;
           if(c>=610 && c<=820 && d>=460 && d<=510)
           {
            closegraph();
            goto Play;
           }
           if(c>=570 && c<=880 && d>=530 && d<=580)
           {
            closegraph();
            goto Instruction;
           }
           if(c>=655 && c<=790 && d>=600 && d<=650)
           {
            closegraph();
            goto About;
           }
           if(c>=670 && c<=780 && d>=670 && d<=720)
           {
            closegraph();
           }
          }
        delay(100);
    }
    Instruction:
    initwindow(1366,768,"output-Instruction");
    readimagefile("instruction.jpg",0,0,1366,768);
    readimagefile("solu1.jpg",1000,120,1300,420);
    readimagefile("solu2.jpg",50,400,350,700);
    settextstyle(BOLD_FONT,HORIZ_DIR,3);
    setcolor(WHITE);
    //setbkcolor(BLACK);
    outtextxy(200,200,"1.No Two Queens Should Present In The Same Row.");
    outtextxy(200,250,"2.No Two Queens Should Present In The Same Column.");
    outtextxy(200,300,"3.No Two Queens Should Be Diagonally Attacked .");
    outtextxy(380,450,"4.There Might Be two Combinations,So,for one combination ");
    outtextxy(380,500,"Black Queen Which Appears On the Right-click of Mouse,");
    outtextxy(380,550,"And For Another Solution we use White Queen on Left-click of Mouse.");
    outtextxy(380,600,"WE Can Represent one solution Using combination of BOth colored QUeens.");
    readimagefile("home1.jpg",1200,630,1300,730);
    settextstyle(BOLD_FONT,HORIZ_DIR,7);
    setcolor(YELLOW);
    setbkcolor(RED);
    outtextxy(25,50,"SOME BASIC INFORMATIONS ARE:-");
    for(int j=0;j<100;j++)
    {
    //setcolor(RED+j);
    //settextstyle(BOLD_FONT,HORIZ_DIR,7);
    //outtextxy(1105,655,"HOME");
    if(GetAsyncKeyState(VK_LBUTTON))
         {
           int c=0,d=0;
           GetCursorPos(&mouse);
           c=mouse.x;
           d=mouse.y;
           cout<<"THE CURSOR POSITION IS "<<c<<" "<<d<<endl;
           if(c>=1200 && c<=1300 && d>=630 && d<=730)
           {
            closegraph();
            goto Home;
           }
         }
     delay(2000);
    }
    About:
    initwindow(1366,768,"output-About");
    for(int i=0;i<100;i++)
     {
       setbkcolor(WHITE);
       setcolor(RED+i);
       readimagefile("about.jpg",0,0,1366,768);
       readimagefile("home1.jpg",1200,50,1300,150);
      //settextstyle(BOLD_FONT,HORIZ_DIR,7);
      //outtextxy(1205,55,"HOME");
       if(GetAsyncKeyState(VK_LBUTTON))
         {
           int c=0,d=0;
           GetCursorPos(&mouse);
           c=mouse.x;
           d=mouse.y;
           cout<<"THE CURSOR POSITION IS "<<c<<" "<<d<<endl;
           if(c>=1200 && c<=1300 &&d>=50 && d<=150)
           {
            closegraph();
            goto Home;
           }
         }
      settextstyle(BOLD_FONT,HORIZ_DIR,8);
      outtextxy(350,25,"CONTRIBUTERS");
      settextstyle(BOLD_FONT,HORIZ_DIR,3);
      readimagefile("priya.jpg",15,350,325,650);
      outtextxy(60,665,"PRIYA MISHRA");
      readimagefile("ramesh3.jpg",360,350,660,650);
      outtextxy(390,665,"RAMESH Kr.MAHATO");
      readimagefile("naresh.jpg",695,350,995,650);
      outtextxy(750,665,"NARESH RAJBANSHI");
      readimagefile("suraj1.jpg",1030,350,1330,650);
      outtextxy(1080,665,"SURAJ SINGH");
      i=i%4;
      delay(2000);
     }
    Play:
    int x=500,y=100;
    initwindow(1366,768,"output-Play");
    readimagefile("play.jpg",0,0,1366,768);
    readimagefile("home1.jpg",1100,620,1265,720);
    readimagefile("restart.jpg",1100,490,1265,590);
    //settextstyle(BOLD_FONT,HORIZ_DIR,1);
    int **arr=new int *[4];//creating the 2D array.
    for(int i=0;i<4;i++)
    {
        arr[i]=new int[4];
        for(int j=0;j<4;j++)
        {
            arr[i][j]=0;
        }
    }
     if(A.nQueen(arr,0,4)==true)
    {
        cout<<"THE ONE SOLUTION'S COMBINATION  IS"<<endl;
        for(int i=0;i<4;i++)// for displaying the output.
        {
            for(int j=0;j<4;j++)
            {
                cout<<arr[i][j]<<" ";
            }
            cout<<endl;
        }
    } 
    cout<<"THE ANOTHER SOLUTION'S COMBINATION IS"<<endl;
    int solu1[4][4];
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
         solu1[i][j]=0;
        }
    }
    for(int i=0;i<4;i++)
     {
      for(int j=0;j<4;j++)
        {
         if(arr[i][j]==1) 
           {
            solu1[j][i]=1;
            }
        }
     }
    for(int i=0;i<4;i++)
     {
       for (int j=0;j<4;j++)
        {
        cout<<solu1[i][j]<<" ";
        }
        cout<<endl;
    }
    //for storing the solutions from the 2D into Array.
    leftclicksolution(arr);
    rightclicksolution(solu1);
    cout<<"leftclicksolution is :-";
    for(int i=0;i<8;i++)
    {
       cout<< solutionA[i]<<" ";
    }
    cout<<endl;
    cout<<"Rightclicksolution is :-";
    for(int i=0;i<8;i++)
    {
       cout<< solutionB[i]<<" ";
    }
    cout<<endl;
    for(int i=0;i<4;i++)
    {
        for(int j=0;j<4;j++)
        {
            if(NEP==0)
            {
            setcolor(YELLOW);
            setlinestyle(3,0,4);
            setfillstyle(SOLID_FILL,RED);
            rectangle(x,y,x+100,y+100);
            floodfill(x+3,y+3,YELLOW);
            NEP=1;
            }
            else
            {
                setcolor(YELLOW);
                setlinestyle(3,0,4);
                setfillstyle(SOLID_FILL,BLUE);
                rectangle(x,y,x+100,y+100);
                floodfill(x+3,y+3,YELLOW);
                NEP=0;
            }
            x=x+100;
        }
        if (NEP==0)
            NEP=1;
        else
            NEP=0;
        x=500;
        y=y+100;
    }
    setbkcolor(BLUE);
    readimagefile("white.jpg",100,100,175,175);
    readimagefile("black.jpg",220,100,295,175);
    outtextxy(90,185,"* LEFT CLICK");
    outtextxy(210,185,"* RIGHT CLICK");
    outtextxy(132,70,"(A)");
    outtextxy(252,70,"(B)");
    outtextxy(620,560," (4*4) CHESS BOARD.");
    outtextxy(100,245,"THE POSSIBLE SOUTIONS ARE : ");
    outtextxy(50,345,"[A]");
    readimagefile("solu1.jpg",90,265,340,465);
    outtextxy(50,574,"[B]");
    readimagefile("solu2.jpg",90,485,340,685);
    //lower horizontal.
    outtextxy(540,515,"[ 0 ]");
    outtextxy(640,515,"[ I ]");
    outtextxy(740,515,"[ II ]");
    outtextxy(840,515,"[ III ]");
    //upper horizontal.
    outtextxy(540,70,"[ 0 ]");
    outtextxy(640,70,"[ 1 ]");
    outtextxy(740,70,"[ 2 ]");
    outtextxy(840,70,"[ 3 ]");
    //left vertical.
    outtextxy(460,145,"[ 0 ]");
    outtextxy(460,245,"[ 1 ]");
    outtextxy(460,345,"[ 2 ]");
    outtextxy(460,445,"[ 3 ]");
    //right vertical.
    outtextxy(915,145,"[ 0 ]");
    outtextxy(915,245,"[ I ]");
    outtextxy(915,345,"[ II ]");
    outtextxy(915,445,"[ III ]");
    settextstyle(BOLD_FONT,HORIZ_DIR,3);
    int count=0;
	while(count<4)
	{
		if(GetAsyncKeyState(VK_LBUTTON))
		 {
            GetCursorPos(&mouse);
            int a=mouse.x;
            int b=mouse.y;
            if(a>=500 && a<=900 && b>=100 && b<=500)
            {
                int c=0,d=0;
                s=m.getthecell(a,b);
                 c=s.x;
                 d=s.y;
                getstorage(c,d);
                for(int j=0;j<15;j++)
                 {
                  readimagefile("white.jpg",c+j,d+j,c+92-j,d+92-j);
                  delay(10);
                 }
                 count++;
            }
            else if(a>=1100 && a<=1265 && b>=620 && b<=720)
            {
             closegraph();
             goto Home; 
            }
            else if(a>=1100 && a<=1265 && b>=490 && b<=590)
            {
             closegraph();
             storagecount=0;
             goto Play;
            }
         } 
		else if(GetAsyncKeyState(VK_RBUTTON))
		 {
            int c=0,d=0;
            GetCursorPos(&mouse);
            int a=mouse.x;
            int b=mouse.y;
            //cout<<"THE RIGHT_CLICKED CORDINATE before checked IS\t("<<a<<","<<b<<")"<<endl;
            if(a>=500 &&a<=900 &&b>=100 && b<=500)
            {
              s=m.getthecell(a,b);
              c=s.x;
              d=s.y;
              getstorage(c,d);
              for(int j=0;j<15;j++)
                {
			     readimagefile("black.jpg",c+j,d+j,c+92-j,d+92-j);
                 delay(10);
                 }                
              count++;
            }       
		 }
    }
    displaythestorage();
    if(check()==1)
    {
      outtextxy(1000,150,"CONGRATS YOU WIN!!!");
    }  
    else
    {
     outtextxy(1000,150,"GIVE A NEXT TRY !!!");
    }
    while(1)
    {
    //settextstyle(BOLD_FONT,HORIZ_DIR,7);
     //outtextxy(1105,655,"HOME");
    // outtextxy(1105,525,"CLEAR");
     if(GetAsyncKeyState(VK_LBUTTON))
         {
           int c=0,d=0;
           GetCursorPos(&mouse);
           c=mouse.x;
           d=mouse.y;
           cout<<"THE CURSOR POSITION IS "<<c<<" "<<d<<endl;
           if(c>=1100 && c<=1265 && d>=620 && d<=720)
           {
            closegraph();
            goto Home; 
           }
         }
          if(GetAsyncKeyState(VK_LBUTTON))
         { 
           int c=0,d=0;
           GetCursorPos(&mouse);
           c=mouse.x;
           d=mouse.y;
           cout<<"THE CURSOR POSITION IS "<<c<<" "<<d<<endl;
           if(c>=1100 && c<=1265 && d>=490 && d<=590)
           {
            closegraph();
            storagecount=0;
            goto Play;
           }
         }
         delay(100);
    }
    //delete(arr);
	getch();
    closegraph();
	return 0;
}
